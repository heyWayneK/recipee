generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// CUSTOMER_____________________________________
// CUSTOMER_____________________________________
// CUSTOMER________________________________START

model org {
  id              String   @id @default(uuid())
  name            String
  // email           String    @unique
  // email_verified  DateTime?
  address         String
  logo            String?
  active          Boolean  @default(true)
  payment_options String
  contacts        String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  username      String?
  emails        Json?
  phone_numbers Json?

  last_sign_in_at           DateTime?            @default(now())
  json                      Json?
  // Are we using imperial or metric?
  unit_metric_imperial      unit_metric_imperial @relation(fields: [unit_metric_imperial_name], references: [name])
  unit_metric_imperial_name String               @default("metric") // Default to metric

  vat_number String?

  country_locale    country_locale @relation(fields: [country_locale_id], references: [id])
  country_locale_id Int

  recipe_mode      recipe_mode @relation(fields: [recipe_mode_name], references: [name])
  recipe_mode_name String      @default("home") // Default to simple mode

  ingredients              ingredients[]
  suppliers                supplier[]
  allergies                allergy[]
  stocks                   stock[]
  stock_locations          stock_location[]
  recipe_books             recipe_book[]
  todos                    todo[]
  stock_minimum            stock_minimum[]
  recip_backup             recipe_backup[]
  recipe_book_index        recipe_book_index[]
  recipe_book_collection   recipe_book_collection[]
  recipe_book_ccess        recipe_book_access[]
  todo_status              todo_status[]
  todo_document            todo_document[]
  conversation_thread      conversation_thread[]
  production_event         production_event[]
  production_event_task    production_event_task[]
  other_costs_category     other_costs_category[]
  markup                   markup[]
  recipe                   recipe[]
  ingredients_nutrition    ingredients_nutrition[]
  packaging_costs_category packaging_costs_category[]
  vat_rules                vat_rules[]
  brand                    brand[]
  other_costs_lookup       other_costs_lookup[]
  packaging_costs_lookup   packaging_costs_lookup[]
}

model supplier {
  id                        Int                         @id @default(autoincrement())
  org                       org                         @relation(fields: [org_id], references: [id])
  org_id                    String
  name                      String
  vat                       String?
  corporation_number        String?
  logo                      String?
  email                     String?
  tel                       String?
  cell                      String?
  whatsapp                  String?
  account_email             String?
  account_name              String?
  account_tel               String?
  created_at                DateTime                    @default(now())
  updated_at                DateTime                    @updatedAt
  packaging_costs_line_item packaging_costs_line_item[]
  other_costs_line_item     other_costs_line_item[]
}

// model Role {
//   id         Int      @id @default(autoincrement())
//   profiles_id     Int
//   role       Int
//   org   org @relation(fields: [org_id], references: [id])
//   org_id String
//   created_at  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// 
// CUSTOMER__________________________________END
// CUSTOMER_____________________________________
// CUSTOMER_____________________________________
//
//
//
// USER__________________________________________
// USER__________________________________________
// USER_____________________________________START

model brand {
  id         Int      @id @default(autoincrement())
  name       String
  logoSrc    String
  recipes    recipe[]
  org        org      @relation(fields: [org_id], references: [id])
  org_id     String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model markup {
  id             Int         @id @default(autoincrement())
  org            org         @relation(fields: [org_id], references: [id])
  org_id         String
  name           String
  factor         Decimal     @db.Decimal(10, 3)
  markup_type    markup_type @relation(fields: [markup_type_id], references: [id])
  markup_type_id Int
  desc           String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

// OLD AUTH MODEL
// model Account {
//   id                 Int     @id @default(autoincrement())
//   profiles_id             Int
//   type               String
//   provider           String
//   providerAccount_id  String
//   refresh_token      String? @db.Text
//   access_token       String? @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String? @db.Text
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user user @relation(fields: [profiles_id], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccount_id])
// }

// OLD AUTH MODEL
// model Session {
//   id           Int      @id @default(autoincrement())
//   sessionToken String   @unique
//   profiles_id       Int
//   expires      DateTime

//   profiles       profiles      @relation(fields: [profiles_id], references: [id], onDelete: Cascade)
//   org   org? @relation(fields: [org_id], references: [id])
//   org_id Int?
// }

model member {
  id             Int       @id @default(autoincrement())
  email          String?   @unique
  email_verified DateTime?
  image          String?
  org_id         String?
  price_id       String?
  hasAccess      Boolean?
  avatar_url     String?
  roles          Json?
  first_name     String?
  last_name      String?
  created_at     DateTime  @default(now())
}

// INFO: Manually integrated to Clerk.io Auth
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// USER_______________________________________END
// USER__________________________________________
// USER__________________________________________
//
//
//
// SETTINGS______________________________________
// SETTINGS______________________________________
// SETTINGS_________________________________START
model unit_type {
  // weight or fluid
  id          Int           @id @default(autoincrement())
  name        String
  desc        String?
  imperial    String?
  metric      String?
  ingredients ingredients[]
}

model unit_metric_imperial {
  // metric or imperial
  id         Int      @id @default(autoincrement())
  name       String   @unique
  is_default Boolean? @default(false)
  org        org[]
}

model prep_instructions {
  id          Int      @id @default(autoincrement())
  name        String
  translation Json?
  metric      String?
  imperial    String?
  desc        String?
  yield       Decimal? @db.Decimal(10, 3)
  is_live     Boolean  @default(true)
  updated_at  DateTime @updatedAt
}

model raw_to_prepped_yields {
  id               Int         @id @default(autoincrement())
  whole            Decimal     @db.Decimal(10, 3)
  peeled           Decimal     @db.Decimal(10, 3)
  peeled_and_cored Decimal     @db.Decimal(10, 3)
  diced            Decimal     @db.Decimal(10, 3)
  sliced           Decimal     @db.Decimal(10, 3)
  grated           Decimal     @db.Decimal(10, 3)
  updated_at       DateTime    @updatedAt
  ingredients      ingredients @relation(fields: [ingredients_id], references: [id])
  ingredients_id   Int         @unique
  // @@map("raw_to_prepped_yields")
}

model cooked_yields_categories {
  // LISTS of cooked yield categories for dropdown menus
  id          Int       @id @default(autoincrement())
  name        String
  translation Json?
  desc        String?
  yield       Decimal?  @db.Decimal(10, 3)
  is_live     Boolean   @default(true)
  updated_at  DateTime  @updatedAt
  created_at  DateTime? @default(now())
}

// model cooked_yields {
//   // LISTS of cooked yield for dropdown menus
//   id                          Int                       @id @default(autoincrement())
//   name                        String
//   translation                 Json?
//   desc                        String?
//   is_live                     Boolean                   @default(true)
//   yield                       Decimal @db.Decimal(10, 3)
//   updated_at                  DateTime                  @updatedAt
//   created_at                  DateTime?                 @default(now())
//   cooked_yields_categories    cooked_yields_categories? @relation(fields: [cooked_yields_categories_id], references: [id])
//   cooked_yields_categories_id Int?

//   ingredients_yields    ingredients_yields? @relation(fields: [ingredients_yields_id], references: [id])
//   ingredients_yields_id Int?
// }

model dry_cooked_yields_categories {
  id                Int                 @id @default(autoincrement())
  name              String
  translation       Json?
  desc              String?
  yield             Decimal?            @db.Decimal(10, 3)
  is_live           Boolean             @default(true)
  updated_at        DateTime            @updatedAt
  dry_cooked_yields dry_cooked_yields[]
}

model dry_cooked_yields {
  id                              Int                           @id @default(autoincrement())
  name                            String
  translation                     Json?
  desc                            String?
  yield                           Decimal?                      @db.Decimal(10, 3)
  is_live                         Boolean                       @default(true)
  updated_at                      DateTime                      @updatedAt
  dry_cooked_yields_categories    dry_cooked_yields_categories? @relation(fields: [dry_cooked_yields_categories_id], references: [id])
  dry_cooked_yields_categories_id Int?
  ingredients                     ingredients[]
}

model ingredients_religious_certification {
  id                Int           @id @default(autoincrement())
  name              String        @default("unknown")
  kosherIngredients ingredients[] @relation("KosherRelation") // Back-relation for kosher
  halalIngredients  ingredients[] @relation("HalalRelation") // Back-relation for halal
}

model language {
  id             Int              @id @default(autoincrement()) // Unique identifier for each language
  name           String           @unique // Human-readable name (e.g., "English (UK)")
  code           String           @unique // Language code (e.g., "en-GB", "fr")
  is_active      Boolean          @default(true)
  country_locale country_locale[] // Relation to country_locale
}

model country_locale {
  id                Int      @id @default(autoincrement()) // Unique identifier
  country_name      String   @unique // Full name of the country (e.g., "United Kingdom")
  country_code      String   @unique // ISO 3166-1 alpha-2 code (e.g., "GB")
  currency_code     String // ISO 4217 currency code (e.g., "GBP")
  currency_name     String // Full name of the currency (e.g., "British Pound")
  currency_symbol   String // Symbol for the currency (e.g., "£")
  language_code     String // Primary language code (e.g., "en" for English)
  locale            String // Locale code for formatting (e.g., "en-GB")
  time_zone         String // Primary time zone (e.g., "Europe/London")
  date_format       String // Common date format (e.g., "DD/MM/YYYY")
  decimal_separator String // Decimal separator (e.g., "." or ",")
  is_active         Boolean  @default(true) // Whether the locale is currently supported
  language          language @relation(fields: [language_id], references: [id])
  language_id       Int
  org               org[]
}

model ingredient_cooked_yields {
  // LISTS of cooked yield for dropdown menus
  id             Int         @id @default(autoincrement())
  ingredients    ingredients @relation(fields: [ingredients_id], references: [id])
  ingredients_id Int         @unique
  raw            Decimal     @db.Decimal(10, 3)
  cooked         Decimal     @db.Decimal(10, 3)
  deep_fry       Decimal     @db.Decimal(10, 3)
  shallow_fry    Decimal     @db.Decimal(10, 3)
  boiled         Decimal     @db.Decimal(10, 3)
  roasted        Decimal     @db.Decimal(10, 3)
  updated_at     DateTime    @updatedAt
  created_at     DateTime    @default(now())
}

model home_mode_units {
  // home_mode_units: imperial, metric
  id                   Int     @id @default(autoincrement())
  name                 String
  order                Int     @default(1)
  desc                 String?
  primary_category_ids String?
  group                String?
  // e.g., "vegetables", "fruits"

  default_g      Decimal @default(0.00)
  default_g_conf Decimal @default(0.00)
  fluid_g        Decimal @default(0.00)
  fluid_g_conf   Decimal @default(0.00)
  weight_g       Decimal @default(0.00)
  weight_g_conf  Decimal @default(0.00)
  is_default     Boolean @default(false)
}

model ingredient_category_primary {
  id                            Int                             @id @default(autoincrement())
  name                          String
  translation                   Json?
  created_at                    DateTime                        @default(now())
  updated_at                    DateTime?                       @updatedAt
  ingredient_category_secondary ingredient_category_secondary[]
  ingredients                   ingredients[]
}

model ingredient_category_secondary {
  id                             Int                         @id @default(autoincrement())
  name                           String
  ingredientCategoryPrimary      ingredient_category_primary @relation(fields: [ingredient_category_primary_id], references: [id])
  ingredient_category_primary_id Int
  translation                    Json?
  created_at                     DateTime                    @default(now())
  updated_at                     DateTime?                   @updatedAt
}

model dietary_classification {
  // Vegan, Veg, Animal Product, None
  id          Int           @id @default(autoincrement())
  name        String
  translation Json?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  ingredients ingredients[]
}

// model ingredients_yields {
//   id             Int          @id @default(autoincrement())
//   org       org?    @relation(fields: [org_id], references: [id])
//   org_id    Int?
//   is_default     Boolean?     @default(false)
//   name           String
//   ingredients    ingredients? @relation(fields: [ingredients_id], references: [id])
//   ingredients_id Int?
//   yield          Decimal     @db.Decimal(10, 3)?
//   is_live        Boolean      @default(true)
//   created_at     DateTime     @default(now())
//   updated_at     DateTime     @updatedAt
// }

model allergy {
  id                 Int                  @id @default(autoincrement())
  org                org?                 @relation(fields: [org_id], references: [id])
  org_id             String?
  name               String
  desc               String
  translation        Json?
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt
  allergy_ingredient allergy_ingredient[]
  ingredients        ingredients[]
}

model oil_purpose {
  // oil_purpose: added, shallow fry, etc
  id         Int      @id @default(autoincrement())
  name       String
  factor     Decimal  @db.Decimal(10, 3)
  desc       String?
  is_default Boolean  @default(false)
  confidence Decimal? @db.Decimal(10, 3)
}

model salt_purpose {
  // salt_purpose: added, boiling
  id         Int     @id @default(autoincrement())
  name       String
  factor     Decimal @db.Decimal(10, 3)
  desc       String?
  is_default Boolean @default(false)
  confidence Decimal @db.Decimal(10, 3)
}

model todo_status {
  id         Int      @id @default(autoincrement())
  org        org      @relation(fields: [org_id], references: [id])
  org_id     String
  name       String
  todos      todo[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// model cost_rules {
//   id          Int      @id @default(autoincrement())
//   org    org @relation(fields: [org_id], references: [id])
//   org_id Int
//   name        String
//   cost        String
//   description String
// }

model markup_type {
  id     Int      @id @default(autoincrement())
  name   String
  desc   String?
  markup markup[]
}

model ingredient_type {
  id                Int                 @id @default(autoincrement())
  name              String
  desc              String
  recipe_components recipe_components[]
}

// model packaging_costs_category_example {
//   id                                Int                                 @id @default(autoincrement())
//   name                              String
//   desc                              String
//   is_active                         Boolean                             @default(true)
//   packaging_costs_line_item_example packaging_costs_line_item_example[]
// }

// model packaging_costs_line_item_example {
//   id                                  Int                              @id @default(autoincrement())
//   packaging_costs_category_example    packaging_costs_category_example @relation(fields: [packaging_costs_category_example_id], references: [id])
//   packaging_costs_category_example_id Int
//   name                                String
//   cost                                String
//   desc                                String
//   is_active                           Boolean
//   supplier                            supplier?                        @relation(fields: [supplier_id], references: [id])
//   supplier_id                         Int?
// }

// model other_costs_category_example {
//   id                            Int                             @id @default(autoincrement())
//   name                          String
//   desc                          String
//   is_active                     Boolean                         @default(true)
//   other_costs_line_item_example other_costs_line_item_example[]
// }

// model other_costs_line_item_example {
//   id                              Int                          @id @default(autoincrement())
//   other_costs_category_example    other_costs_category_example @relation(fields: [other_costs_category_example_id], references: [id])
//   other_costs_category_example_id Int
//   name                            String
//   cost                            String
//   desc                            String
//   is_active                       Boolean
//   supplier                        supplier?                    @relation(fields: [supplier_id], references: [id])
//   supplier_id                     Int?
// }

model other_costs_category {
  id                 Int                  @id @default(autoincrement())
  org                org                  @relation(fields: [org_id], references: [id])
  org_id             String
  name               String
  desc               String
  other_costs_lookup other_costs_lookup[]
}

model other_costs_lookup {
  id     Int     @id @default(autoincrement())
  org    org?    @relation(fields: [org_id], references: [id])
  org_id String?

  other_costs_category    other_costs_category @relation(fields: [other_costs_category_id], references: [id])
  other_costs_category_id Int

  other_costs_line_item    other_costs_line_item @relation(fields: [other_costs_line_item_id], references: [id])
  other_costs_line_item_id Int

  @@unique([other_costs_category_id, other_costs_line_item_id])
}

model other_costs_line_item {
  id                 Int                  @id @default(autoincrement())
  name               String
  cost               Decimal              @db.Decimal(10, 2)
  desc               String
  supplier           supplier?            @relation(fields: [supplier_id], references: [id])
  supplier_id        Int?
  is_active          Boolean              @default(true)
  other_costs_lookup other_costs_lookup[]
}

model packaging_costs_category {
  id                     Int                      @id @default(autoincrement())
  org                    org                      @relation(fields: [org_id], references: [id])
  org_id                 String
  name                   String
  desc                   String
  is_active              Boolean                  @default(true)
  packaging_costs_lookup packaging_costs_lookup[] @relation("CategoryToLookup")
}

model packaging_costs_lookup {
  id                           Int                       @id @default(autoincrement())
  packaging_costs_category     packaging_costs_category  @relation(name: "CategoryToLookup", fields: [packaging_costs_category_id], references: [id])
  packaging_costs_category_id  Int
  packaging_costs_line_item    packaging_costs_line_item @relation(name: "LineItemToLookup", fields: [packaging_costs_line_item_id], references: [id])
  packaging_costs_line_item_id Int
  org                          org?                      @relation(fields: [org_id], references: [id])
  org_id                       String?

  @@unique([packaging_costs_category_id, packaging_costs_line_item_id])
}

model packaging_costs_line_item {
  id                     Int                      @id @default(autoincrement())
  name                   String
  cost                   Decimal                  @db.Decimal(10, 2)
  desc                   String
  is_active              Boolean                  @default(true)
  supplier               supplier?                @relation(fields: [supplier_id], references: [id])
  supplier_id            Int?
  packaging_costs_lookup packaging_costs_lookup[] @relation("LineItemToLookup")
}

model vat_rules {
  id          Int     @id @default(autoincrement())
  org         org     @relation(fields: [org_id], references: [id])
  org_id      String
  name        String
  cost        Decimal @db.Decimal(10, 2)
  description String
  is_active   Boolean @default(true)
  default     Boolean @default(false)

  @@unique([org_id, default])
}

// SETTINGS___________________________________END
// SETTINGS______________________________________
// SETTINGS______________________________________
//
//
//
// RECIPEE_____________________________________
// RECIPEE_____________________________________
// RECIPEE________________________________START

model ingredients {
  id          Int      @id @default(autoincrement())
  name        String
  name_orig   String?
  names_alt   String?
  org         org?     @relation(fields: [org_id], references: [id])
  org_id      String?
  is_default  Boolean? @default(false)
  translation Json?

  primary_category    ingredient_category_primary? @relation(fields: [primary_category_id], references: [id])
  primary_category_id Int?
  secondary_category  String?

  unit_type    unit_type? @relation(fields: [unit_type_id], references: [id])
  unit_type_id Int?       @default(1) // 1 = weight (g, kg)

  raw_to_prepped_yields raw_to_prepped_yields[]
  cooked_yields         ingredient_cooked_yields[]
  dry_cooked_yields     dry_cooked_yields[]
  recipe_component      recipe_components[]
  ingredients_nutrition ingredients_nutrition[]
  created_at            DateTime                   @default(now())
  updated_at            DateTime                   @updatedAt

  dietary_classification    dietary_classification? @relation(fields: [dietary_classification_id], references: [id])
  dietary_classification_id Int?

  kosher    ingredients_religious_certification? @relation(name: "KosherRelation", fields: [kosher_id], references: [id])
  kosher_id Int?

  halal    ingredients_religious_certification? @relation(name: "HalalRelation", fields: [halal_id], references: [id])
  halal_id Int?

  confidence         Decimal?             @db.Decimal(10, 3)
  allergy_ingredient allergy_ingredient[]
  ai_model           String?
  WebhookQueue       WebhookQueue[]
  allergy            allergy?             @relation(fields: [allergyId], references: [id])
  allergyId          Int?
  deleted            Boolean              @default(false)
}

model ingredients_nutrition {
  id                        Int         @id @default(autoincrement())
  org                       org?        @relation(fields: [org_id], references: [id])
  org_id                    String?
  is_default                Boolean?    @default(false)
  ingredients               ingredients @relation(fields: [ingredients_id], references: [id])
  ingredients_id            Int         @unique
  kcal_per_100g             Decimal?    @db.Decimal(10, 3)
  kj_per_100g               Decimal?    @db.Decimal(10, 3)
  protein_per_100g          Decimal?    @db.Decimal(10, 3)
  fat_per_100g              Decimal?    @db.Decimal(10, 3)
  saturated_fat_per_100g    Decimal?    @db.Decimal(10, 3)
  monounsaturate_per_100g   Decimal?    @db.Decimal(10, 3)
  polyunsaturate_per_100g   Decimal?    @db.Decimal(10, 3)
  trans_fats_per_100g       Decimal?    @db.Decimal(10, 3)
  omega3_per_100g           Decimal?    @db.Decimal(10, 3)
  omega6_per_100g           Decimal?    @db.Decimal(10, 3)
  omega9_per_100g           Decimal?    @db.Decimal(10, 3)
  carbs_per_100g            Decimal?    @db.Decimal(10, 3)
  net_carbs_per_100g        Decimal?    @db.Decimal(10, 3)
  carbohydrates_per_100g    Decimal?    @db.Decimal(10, 3)
  total_sugar_per_100g      Decimal?    @db.Decimal(10, 3)
  added_sugar_per_100g      Decimal?    @db.Decimal(10, 3)
  artificial_sugar_per_100g Decimal?    @db.Decimal(10, 3)
  fibre_per_100g            Decimal?    @db.Decimal(10, 3)
  starch_per_100g           Decimal?    @db.Decimal(10, 3)
  salt_per_100g             Decimal?    @db.Decimal(10, 3)
  sodium_per_100g           Decimal?    @db.Decimal(10, 3)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model allergy_ingredient {
  id            Int         @id @default(autoincrement())
  allergy       allergy     @relation(fields: [allergy_id], references: [id])
  allergy_id    Int
  ingredient    ingredients @relation(fields: [ingredient_id], references: [id])
  ingredient_id Int
  created_at    DateTime    @default(now())
  updated_at    DateTime?   @updatedAt
}

model stock {
  id                Int             @id @default(autoincrement())
  stock_location    stock_location  @relation(fields: [stock_location_id], references: [id])
  stock_location_id Int
  org               org             @relation(fields: [org_id], references: [id])
  org_id            String
  qty               Int
  is_active         Boolean         @default(true)
  minimums          stock_minimum[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model stock_minimum {
  id                Int            @id @default(autoincrement())
  stock             stock          @relation(fields: [stock_id], references: [id])
  stock_id          Int
  stock_location    stock_location @relation(fields: [stock_location_id], references: [id])
  stock_location_id Int
  org               org            @relation(fields: [org_id], references: [id])
  org_id            String
  qty               Int
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
}

model stock_location {
  id            Int             @id @default(autoincrement())
  org           org             @relation(fields: [org_id], references: [id])
  org_id        String
  name          String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  stock         stock[]
  stock_minimum stock_minimum[]
}

model recipe_backup {
  id        Int    @id @default(autoincrement())
  recipe_id Int
  org       org    @relation(fields: [org_id], references: [id])
  org_id    String

  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model recipe_book {
  id                     Int                      @id @default(autoincrement())
  org                    org                      @relation(fields: [org_id], references: [id])
  org_id                 String
  name                   String
  desc                   String?
  image                  String?
  price                  Decimal?                 @db.Decimal(10, 2)
  url                    String?
  indexes                recipe_book_index[]
  access                 recipe_book_access[]
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  recipe_book_collection recipe_book_collection[]
}

model recipe_book_index {
  id             Int         @id @default(autoincrement())
  recipe_book    recipe_book @relation(fields: [recipe_book_id], references: [id])
  recipe_book_id Int
  org            org         @relation(fields: [org_id], references: [id])
  org_id         String
  order          Int
  name           String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model recipe_book_collection {
  id             Int         @id @default(autoincrement())
  recipe_id      Int
  recipe_book    recipe_book @relation(fields: [recipe_book_id], references: [id])
  recipe_book_id Int
  org            org         @relation(fields: [org_id], references: [id])
  org_id         String
  name           String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model recipe_book_access {
  id             Int         @id @default(autoincrement())
  recipe_book    recipe_book @relation(fields: [recipe_book_id], references: [id])
  recipe_book_id Int
  org            org         @relation(fields: [org_id], references: [id])
  org_id         String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model todo {
  id         Int             @id @default(autoincrement())
  org        org             @relation(fields: [org_id], references: [id])
  org_id     String
  status     todo_status     @relation(fields: [status_id], references: [id])
  status_id  Int
  documents  todo_document[]
  created_at DateTime        @default(now())
  updated_at DateTime        @updatedAt
}

model todo_document {
  id      Int  @id @default(autoincrement())
  todo    todo @relation(fields: [todo_id], references: [id])
  todo_id Int

  org        org      @relation(fields: [org_id], references: [id])
  org_id     String
  file       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model conversation_thread {
  id Int @id @default(autoincrement())

  org    org    @relation(fields: [org_id], references: [id])
  org_id String

  message    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model production_event {
  id Int @id @default(autoincrement())

  org         org                     @relation(fields: [org_id], references: [id])
  org_id      String
  recipe      recipe                  @relation(fields: [recipe_uuid], references: [uuid])
  recipe_uuid String
  pdf         String
  tasks       production_event_task[]
  created_at  DateTime                @default(now())
  updated_at  DateTime                @updatedAt
}

model production_event_task {
  id                  Int              @id @default(autoincrement())
  production_event    production_event @relation(fields: [production_event_id], references: [id])
  production_event_id Int

  org         org      @relation(fields: [org_id], references: [id])
  org_id      String
  recipe      recipe   @relation(fields: [recipe_uuid], references: [uuid])
  recipe_uuid String
  pdf         String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

// model packaging_costs {
//   id          Int      @id @default(autoincrement())
//   org    org @relation(fields: [org_id], references: [id])
//   org_id Int
//   name        String
//   cost        Decimal @db.Decimal(10, 2)
//   description String
// }

model recipe {
  uuid String @id @default(uuid())
  name String
  desc String

  org    org    @relation(fields: [org_id], references: [id])
  org_id String

  brand    brand @relation(fields: [brand_id], references: [id])
  brand_id Int

  // recipe_type: local, master, unlinked_master
  recipe_type    recipe_type @relation(fields: [recipe_type_id], references: [id])
  recipe_type_id Int

  // recipe_mode: pro, home
  recipe_mode      recipe_mode @relation(fields: [recipe_mode_name], references: [name])
  recipe_mode_name String      @default("pro") // Default to simple mode

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  recipe_components     recipe_components[]
  production_event      production_event[]
  production_event_task production_event_task[]
  recipe_portions       recipe_portions[]
}

model recipe_components {
  id                 Int                 @id @default(autoincrement())
  name               String
  ingredient_type    ingredient_type     @relation(fields: [ingredient_type_id], references: [id])
  ingredient_type_id Int
  parent             recipe_components?  @relation("componentHierarchy", fields: [parent_id], references: [id])
  parent_id          Int?
  // ingredient    ingredients?       @relation(fields: [ingredient_id], references: [id])
  // DO I NEED THIS ingredientID - should be optional?
  ingredient_id      ingredients[]
  portions           Json
  yield              Decimal             @db.Decimal(10, 3)
  nutri_per_100      Json
  version            String
  versions           Json
  recipe             recipe              @relation(fields: [recipe_uuid], references: [uuid])
  recipe_uuid        String
  sub_components     recipe_components[] @relation("componentHierarchy")
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
}

model recipe_portions {
  id          Int    @id @default(autoincrement())
  recipe      recipe @relation(fields: [recipe_uuid], references: [uuid])
  recipe_uuid String
  portion     Int
  order       Int
}

model recipe_mode {
  // recipe_mode: simple, advanced
  id         Int      @id @default(autoincrement())
  name       String   @unique // e.g., "pro", "home"
  desc       String?
  is_default Boolean  @default(false)
  org        org[]
  recipe     recipe[]
}

model recipe_type {
  // recipe_mode: local, master, unlinked_master
  id         Int      @id @default(autoincrement())
  name       String
  desc       String?
  recipe     recipe[]
  is_default Boolean  @default(false)
}

// RECIPEE__________________________________END
// RECIPEE_____________________________________
// RECIPEE_____________________________________
//
//
//
// MARKETING_____________________________________
// MARKETING_____________________________________
// MARKETING________________________________START

model lead {
  id         Int      @id @default(autoincrement())
  email      String
  created_at DateTime @default(now())
}

// MARKETING__________________________________END
// MARKETING_____________________________________
// MARKETING_____________________________________
//
//
//
// CRON QUEUES___________________________________
// CRON QUEUES___________________________________
// CRON QUEUES_________________________________RT
model WebhookQueue {
  id            Int         @id @default(autoincrement())
  ingredient    ingredients @relation(fields: [ingredient_id], references: [id])
  ingredient_id Int         @map("ingredient_id")
  name          String
  run_count     Int?        @default(0)
  created_at    DateTime    @default(now())
  // createdAt     DateTime    @default(now()) @map("created_at")
  processed     Boolean     @default(false)
  type          String?

  @@map("webhook_queue")
}

// CRON QUEUES_________________________________ND
// CRON QUEUES___________________________________
// CRON QUEUES___________________________________
