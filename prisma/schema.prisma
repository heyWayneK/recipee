generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRESQL_URI")
  directUrl = env("POSTGRESQL_DIRECT_URI")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime

  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId Int?
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  customerId    String?
  priceId       String?
  hasAccess     Boolean?
  createdAt     DateTime  @default(now())

  accounts            Account[]
  sessions            Session[]
  Todo                Todo[]
  TodoStatus          TodoStatus[]
  TodoDocument        TodoDocument[]
  ConversationThread  ConversationThread[]
  ProductionEvent     ProductionEvent[]
  ProductionEventTask ProductionEventTask[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lead {
  id        Int      @id @default(autoincrement())
  email     String
  createdAt DateTime @default(now())
}

enum EnumLanguage {
  EN
  FR
  SP
}

enum EnumMarkUpType {
  markup
  margin
  xcost
}

enum EnumRecipeType {
  local
  master
  unlinked_master
}

enum EnumDietClassification {
  vegan
  vegetarian
  animal_product
}

enum EnumComponentIngredientType {
  ingredient
  step
  sub
}

enum EnumPrepInstruction {
  none
  n10x10
  n15x15
  n20x20
  fine
  ground
  grate
  fresh
  whole
  brunoise
  chiffonade
  chop
  cube
  dice
  dietClassification
  julienne
  mince
  slice
  rondelle
  diagonal
  batonnet
  jardiniere
  macedoine
  other
}

enum EnumOilPurpose {
  added
  thin_coating
  shallow_fry
  deep_fry
}

enum EnumUnitType {
  weight
  liquid
}

enum EnumMetricOrImperial {
  metric
  imperial
}

model Customer {
  id             Int             @id @default(autoincrement())
  name           String
  email          String          @unique
  emailVerified  DateTime?
  address        String
  logo           String?
  active         Boolean         @default(true)
  paymentOptions String
  contacts       String
  ingredients    Ingredients[]
  suppliers      Supplier[]
  allergies      Allergy[]
  stocks         Stock[]
  stockLocations StockLocation[]
  recipeBooks    RecipeBook[]
  todos          Todo[]
  sessions       Session[]
  roles          Role[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  StockMinimum         StockMinimum[]
  RecipeBackup         RecipeBackup[]
  RecipeBookIndex      RecipeBookIndex[]
  RecipeBookCollection RecipeBookCollection[]
  RecipeBookAccess     RecipeBookAccess[]
  TodoStatus           TodoStatus[]
  TodoDocument         TodoDocument[]
  ConversationThread   ConversationThread[]
  ProductionEvent      ProductionEvent[]
  ProductionEventTask  ProductionEventTask[]
  CostRules            CostRules[]
  PackagingCosts       PackagingCosts[]
  OtherCosts           OtherCosts[]
  Markup               Markup[]
  Recipe               Recipe[]
}

model Role {
  id         Int      @id @default(autoincrement())
  userId     Int
  role       Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Ingredients {
  id         Int         @id @default(autoincrement())
  customer   Customer    @relation(fields: [customerId], references: [id])
  customerId Int
  isDefault  Boolean     @default(false)
  name       String
  nameOther  String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Component  Component[]
}

model Supplier {
  id                Int      @id @default(autoincrement())
  customer          Customer @relation(fields: [customerId], references: [id])
  customerId        Int
  name              String
  vat               String?
  corporationNumber String?
  logo              String?
  email             String?
  tel               String?
  cell              String?
  whatsapp          String?
  accountEmail      String?
  accountName       String?
  accountTel        String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Allergy {
  id         Int      @id @default(autoincrement())
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Stock {
  id              Int            @id @default(autoincrement())
  stockLocation   StockLocation  @relation(fields: [stockLocationId], references: [id])
  stockLocationId Int
  customer        Customer       @relation(fields: [customerId], references: [id])
  customerId      Int
  qty             Float
  isActive        Boolean        @default(true)
  minimums        StockMinimum[]
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model StockMinimum {
  id              Int           @id @default(autoincrement())
  stock           Stock         @relation(fields: [stockId], references: [id])
  stockId         Int
  stockLocation   StockLocation @relation(fields: [stockLocationId], references: [id])
  stockLocationId Int
  customer        Customer      @relation(fields: [customerId], references: [id])
  customerId      Int
  qty             Float
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model StockLocation {
  id           Int            @id @default(autoincrement())
  customer     Customer       @relation(fields: [customerId], references: [id])
  customerId   Int
  name         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Stock        Stock[]
  StockMinimum StockMinimum[]
}

model RecipeBackup {
  id         Int      @id @default(autoincrement())
  recipeId   Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  userId     Int
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model RecipeBook {
  id                   Int                    @id @default(autoincrement())
  customer             Customer               @relation(fields: [customerId], references: [id])
  customerId           Int
  name                 String
  desc                 String?
  image                String?
  price                Float?
  url                  String?
  indexes              RecipeBookIndex[]
  access               RecipeBookAccess[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  RecipeBookCollection RecipeBookCollection[]
}

model RecipeBookIndex {
  id           Int        @id @default(autoincrement())
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id])
  recipeBookId Int
  customer     Customer   @relation(fields: [customerId], references: [id])
  customerId   Int
  order        Int
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model RecipeBookCollection {
  id           Int        @id @default(autoincrement())
  recipeId     Int
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id])
  recipeBookId Int
  customer     Customer   @relation(fields: [customerId], references: [id])
  customerId   Int
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model RecipeBookAccess {
  id           Int        @id @default(autoincrement())
  recipeBook   RecipeBook @relation(fields: [recipeBookId], references: [id])
  recipeBookId Int
  customer     Customer   @relation(fields: [customerId], references: [id])
  customerId   Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Todo {
  id         Int            @id @default(autoincrement())
  user       User           @relation(fields: [userId], references: [id])
  userId     Int
  customer   Customer       @relation(fields: [customerId], references: [id])
  customerId Int
  status     TodoStatus     @relation(fields: [statusId], references: [id])
  statusId   Int
  documents  TodoDocument[]
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
}

model TodoStatus {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  name       String
  todos      Todo[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model TodoDocument {
  id         Int      @id @default(autoincrement())
  todo       Todo     @relation(fields: [todoId], references: [id])
  todoId     Int
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  file       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ConversationThread {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  recipe     Recipe   @relation(fields: [recipeId], references: [id])
  recipeId   Int
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ProductionEvent {
  id         Int                   @id @default(autoincrement())
  user       User                  @relation(fields: [userId], references: [id])
  userId     Int
  customer   Customer              @relation(fields: [customerId], references: [id])
  customerId Int
  recipe     Recipe                @relation(fields: [recipeId], references: [id])
  recipeId   Int
  pdf        String
  tasks      ProductionEventTask[]
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
}

model ProductionEventTask {
  id                Int             @id @default(autoincrement())
  productionEvent   ProductionEvent @relation(fields: [productionEventId], references: [id])
  productionEventId Int
  user              User            @relation(fields: [userId], references: [id])
  userId            Int
  customer          Customer        @relation(fields: [customerId], references: [id])
  customerId        Int
  recipe            Recipe          @relation(fields: [recipeId], references: [id])
  recipeId          Int
  pdf               String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model CostRules {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  name        String
  cost        String
  description String
}

model PackagingCosts {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  name        String
  cost        String
  description String
}

model OtherCosts {
  id          Int      @id @default(autoincrement())
  customer    Customer @relation(fields: [customerId], references: [id])
  customerId  Int
  name        String
  cost        String
  description String
}

model Markup {
  id          Int            @id @default(autoincrement())
  customer    Customer       @relation(fields: [customerId], references: [id])
  customerId  Int
  name        String
  factor      String
  type        EnumMarkUpType
  description String
}

model Recipe {
  id                  Int                   @id @default(autoincrement())
  name                String
  description         String
  portions            Int[]
  costRules           Json
  packagingCostsId    Json
  otherCostsId        Json
  markupId            Json
  components          Component[]
  setting             Json
  customer            Customer              @relation(fields: [customerId], references: [id])
  customerId          Int
  brand               Brand                 @relation(fields: [brandId], references: [id])
  type                EnumRecipeType
  version             String
  versions            Json
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  ConversationThread  ConversationThread[]
  ProductionEvent     ProductionEvent[]
  ProductionEventTask ProductionEventTask[]
  brandId             Int
  RecipePortions      RecipePortions[]
}

model RecipePortions {
  id               Int    @id @default(autoincrement())
  name             String
  recipe           Recipe @relation(fields: [recipeId], references: [id])
  recipeId         Int
  size             Int
  costRules        Int
  packagingCostsId Int
  otherCostsId     Int
  markupId         Int
}

model Component {
  id            Int                         @id @default(autoincrement())
  name          String
  type          EnumComponentIngredientType
  parent        Component?                  @relation("ComponentHierarchy", fields: [parentId], references: [id])
  parentId      Int?
  ingredient    Ingredients?                @relation(fields: [ingredientId], references: [id])
  ingredientId  Int?
  portions      Json
  yield         Float
  nutriPer100   Json
  version       String
  versions      Json
  recipe        Recipe                      @relation(fields: [recipeId], references: [id])
  recipeId      Int
  subComponents Component[]                 @relation("ComponentHierarchy")
  createdAt     DateTime                    @default(now())
  updatedAt     DateTime                    @updatedAt
}

model Brand {
  id        Int      @id @default(autoincrement())
  name      String
  logoSrc   String
  recipes   Recipe[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
