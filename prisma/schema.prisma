generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRESQL_URI")
  directUrl = env("POSTGRESQL_DIRECT_URI")
}

// OLD AUTH MODEL
// model Account {
//   id                 Int     @id @default(autoincrement())
//   profiles_id             Int
//   type               String
//   provider           String
//   providerAccount_id  String
//   refresh_token      String? @db.Text
//   access_token       String? @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String? @db.Text
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user user @relation(fields: [profiles_id], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccount_id])
// }

// OLD AUTH MODEL
// model Session {
//   id           Int      @id @default(autoincrement())
//   sessionToken String   @unique
//   profiles_id       Int
//   expires      DateTime

//   profiles       profiles      @relation(fields: [profiles_id], references: [id], onDelete: Cascade)
//   customer   customer? @relation(fields: [customer_id], references: [id])
//   customer_id Int?
// }

// model user {
//   id            Int       @id @default(autoincrement())
//   name          String?
//   email         String?   @unique
//   email_verified DateTime?
//   image         String?
//   customer_id    String?
//   price_id       String?
//   hasAccess     Boolean?
//   created_at     DateTime  @default(now())

//   // accounts            Account[]
//   // sessions            Session[]
//   todo                todo[]
//   todo_status          todo_status[]
//   todo_document        todo_document[]
//   conversation_thread  conversation_thread[]
//   production_event     production_event[]
//   production_event_task production_event_task[]
// }

// INFO: Manually integrated to Clerk.io Auth

model profiles {
  id                    Int                     @id @default(autoincrement())
  profiles_id           String?                 @unique
  username              String?
  emails                Json?
  phone_numbers         Json?
  organisations         String?
  avatar_url            String?
  roles                 Json?
  first_name            String?
  last_name             String?
  last_sign_in_at       String?
  json                  Json?
  todo                  todo[]
  todo_status           todo_status[]
  todo_document         todo_document[]
  conversation_thread   conversation_thread[]
  production_event      production_event[]
  production_event_task production_event_task[]
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model lead {
  id         Int      @id @default(autoincrement())
  email      String
  created_at DateTime @default(now())
}

enum EnumLanguage {
  EN
  FR
  SP
}

enum EnumMarkUpType {
  markup
  margin
  xcost
}

enum EnumRecipeType {
  local
  master
  unlinked_master
}

enum EnumDietClassification {
  vegan
  vegetarian
  animal_product
  unknown
}

enum EnumcomponentIngredientType {
  ingredient
  step
  sub
}

enum EnumPrepInstruction {
  none
  n10x10
  n15x15
  n20x20
  fine
  ground
  grate
  fresh
  whole
  brunoise
  chiffonade
  chop
  cube
  dice
  dietClassification
  julienne
  mince
  slice
  rondelle
  diagonal
  batonnet
  jardiniere
  macedoine
  other
}

enum EnumOilPurpose {
  added
  thin_coating
  shallow_fry
  deep_fry
}

enum EnumUnitType {
  weight
  liquid
}

enum EnumMetricOrImperial {
  metric
  imperial
}

enum EnumPrimaryCategory {
  alcoholic_beverages
  baking_ingredients
  broths_stocks
  condiments_sauces
  dairy
  eggs
  fats_oils
  fermented_foods
  flavorings_extracts
  fruits
  grains_cereals
  herbs_spices
  legumes
  meat
  mushrooms
  non_alcoholic_beverages
  nuts_seeds
  other
  pasta_noodles
  plant_based_proteins
  poultry
  seafood
  seaweed
  sugars_sweeteners
  vegetables
  vitamins_minerals_supplements
  water
}

model customer {
  id                     Int                      @id @default(autoincrement())
  name                   String
  email                  String                   @unique
  email_verified         DateTime?
  address                String
  logo                   String?
  active                 Boolean                  @default(true)
  payment_options        String
  contacts               String
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  ingredients            ingredients[]
  suppliers              supplier[]
  allergies              allergy[]
  stocks                 stock[]
  stock_locations        stock_location[]
  recipe_books           recipe_book[]
  todos                  todo[]
  stock_minimum          stock_minimum[]
  recip_backup           recipe_backup[]
  recipe_book_index      recipe_book_index[]
  recipe_book_collection recipe_book_collection[]
  recipe_book_ccess      recipe_book_access[]
  todo_status            todo_status[]
  todo_document          todo_document[]
  conversation_thread    conversation_thread[]
  production_event       production_event[]
  production_event_task  production_event_task[]
  cost_rules             cost_rules[]
  packagingCosts         packaging_costs[]
  other_costs            other_costs[]
  markup                 markup[]
  recipe                 recipe[]
  ingredients_nutrition  ingredients_nutrition[]
  ingredients_yields     ingredients_yields[]
}

// model Role {
//   id         Int      @id @default(autoincrement())
//   profiles_id     Int
//   role       Int
//   customer   customer @relation(fields: [customer_id], references: [id])
//   customer_id Int
//   created_at  DateTime @default(now())
//   updatedAt  DateTime @updatedAt
// }

model prep_instructions {
  id             Int          @id @default(autoincrement())
  name           String
  translation    Json?
  desc           String?
  yield          Float?
  is_live        Boolean      @default(true)
  updated_at     DateTime     @updatedAt
  ingredients    ingredients? @relation(fields: [ingredients_id], references: [id])
  ingredients_id Int?
}

model raw_to_prepped_yields {
  id               Int          @id @default(autoincrement())
  whole            Float        @default(0)
  peeled           Float        @default(0)
  peeled_and_cored Float        @default(0)
  diced            Float        @default(0)
  sliced           Float        @default(0)
  grated           Float        @default(0)
  updated_at       DateTime     @updatedAt
  ingredients      ingredients? @relation(fields: [ingredients_id], references: [id])
  ingredients_id   Int?
}

// LISTS of cooked yield categories for dropdown menus
model cooked_yields_categories {
  id            Int             @id @default(autoincrement())
  name          String
  translation   Json?
  desc          String?
  yield         Float?
  is_live       Boolean         @default(true)
  updated_at    DateTime        @updatedAt
  created_at    DateTime?       @default(now())
  cooked_yields cooked_yields[]
}

// LISTS of cooked yield for dropdown menus
model cooked_yields {
  id                          Int                       @id @default(autoincrement())
  name                        String
  translation                 Json?
  desc                        String?
  is_live                     Boolean                   @default(true)
  yield                       Float                     @default(0)
  updated_at                  DateTime                  @updatedAt
  created_at                  DateTime?                 @default(now())
  cooked_yields_categories    cooked_yields_categories? @relation(fields: [cooked_yields_categories_id], references: [id])
  cooked_yields_categories_id Int?

  ingredients_yields    ingredients_yields? @relation(fields: [ingredients_yields_id], references: [id])
  ingredients_yields_id Int?
}

model dry_cooked_yields_categories {
  id                Int                 @id @default(autoincrement())
  name              String
  translation       Json?
  desc              String?
  yield             Float?
  is_live           Boolean             @default(true)
  updated_at        DateTime            @updatedAt
  dry_cooked_yields dry_cooked_yields[]
}

model dry_cooked_yields {
  id                              Int                           @id @default(autoincrement())
  name                            String
  translation                     Json?
  desc                            String?
  yield                           Float?
  is_live                         Boolean                       @default(true)
  updated_at                      DateTime                      @updatedAt
  dry_cooked_yields_categories    dry_cooked_yields_categories? @relation(fields: [dry_cooked_yields_categories_id], references: [id])
  dry_cooked_yields_categories_id Int?
  ingredients                     ingredients[]
}

model ingredients_religious_certification {
  id                Int           @id @default(autoincrement())
  name              String        @default("unknown")
  kosherIngredients ingredients[] @relation("KosherRelation") // Back-relation for kosher
  halalIngredients  ingredients[] @relation("HalalRelation") // Back-relation for halal
}

model ingredients {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  names_alt   String?
  customer    customer? @relation(fields: [customer_id], references: [id])
  customer_id Int?
  is_default  Boolean?  @default(false)
  translation Json?

  primary_category    ingredient_category_primary? @relation(fields: [primary_category_id], references: [id])
  primary_category_id Int?

  secondary_category String?

  raw_to_prepped_yields raw_to_prepped_yields[]
  cooked_yields         ingredient_cooked_yields[]
  dry_cooked_yields     dry_cooked_yields[]
  component             component[]
  prep_instructions     prep_instructions[]
  ingredients_nutrition ingredients_nutrition[]
  created_at            DateTime                   @default(now())
  updated_at            DateTime                   @updatedAt
  ingredients_yields    ingredients_yields[]

  dietary_classification    dietary_classification? @relation(fields: [dietary_classification_id], references: [id])
  dietary_classification_id Int?

  kosher    ingredients_religious_certification? @relation(name: "KosherRelation", fields: [kosher_id], references: [id])
  kosher_id Int?

  halal    ingredients_religious_certification? @relation(name: "HalalRelation", fields: [halal_id], references: [id])
  halal_id Int?

  confidence        Float?
  allergy           allergy?            @relation(fields: [allergy_id], references: [id])
  allergy_id        Int?
  allergyIngredient allergyIngredient[]
  WebhookQueue      WebhookQueue[]
}

// LISTS of cooked yield for dropdown menus
model ingredient_cooked_yields {
  id             Int          @id @default(autoincrement())
  ingredients    ingredients? @relation(fields: [ingredients_id], references: [id])
  ingredients_id Int?
  raw            Float        @default(0)
  cooked         Float        @default(0)
  deep_fry       Float        @default(0)
  shallow_fry    Float        @default(0)
  boiled         Float        @default(0)
  roasted        Float        @default(0)
  updated_at     DateTime     @updatedAt
  created_at     DateTime     @default(now())
}

model ingredient_category_primary {
  id                            Int                             @id @default(autoincrement())
  name                          String
  translation                   Json?
  ingredient_category_secondary ingredient_category_secondary[]
  created_at                    DateTime                        @default(now())
  updated_at                    DateTime                        @updatedAt
  ingredients                   ingredients[]
}

model ingredient_category_secondary {
  id                             Int                         @id @default(autoincrement())
  name                           String
  ingredientCategoryPrimary      ingredient_category_primary @relation(fields: [ingredient_category_primary_id], references: [id])
  ingredient_category_primary_id Int
  translation                    Json?
  created_at                     DateTime                    @default(now())
  updated_at                     DateTime                    @updatedAt
}

// Vegan, Veg, Animal Product, None
model dietary_classification {
  id          Int           @id @default(autoincrement())
  name        String
  translation Json?
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt
  ingredients ingredients[]
}

model ingredients_yields {
  id             Int             @id @default(autoincrement())
  customer       customer?       @relation(fields: [customer_id], references: [id])
  customer_id    Int?
  is_default     Boolean?        @default(false)
  name           String
  ingredients    ingredients?    @relation(fields: [ingredients_id], references: [id])
  ingredients_id Int?
  yield          Float?
  is_live        Boolean         @default(true)
  cooked_yields  cooked_yields[]
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
}

model ingredients_nutrition {
  id                        Int          @id @default(autoincrement())
  customer                  customer?    @relation(fields: [customer_id], references: [id])
  customer_id               Int?
  is_default                Boolean?     @default(false)
  ingredients               ingredients? @relation(fields: [ingredients_id], references: [id])
  ingredients_id            Int?
  kcal_per_100g             Float?       @default(0)
  kj_per_100g               Float?       @default(0)
  protein_per_100g          Float?       @default(0)
  fat_per_100g              Float?       @default(0)
  saturated_fat_per_100g    Float?       @default(0)
  monounsaturate_per_100g   Float?       @default(0)
  polyunsaturate_per_100g   Float?       @default(0)
  trans_fats_per_100g       Float?       @default(0)
  omega3_per_100g           Float?       @default(0)
  omega6_per_100g           Float?       @default(0)
  omega9_per_100g           Float?       @default(0)
  carbs_per_100g            Float?       @default(0)
  net_carbs_per_100g        Float?       @default(0)
  carbohydrates_per_100g    Float?       @default(0)
  total_sugar_per_100g      Float?       @default(0)
  added_sugar_per_100g      Float?       @default(0)
  artificial_sugar_per_100g Float?       @default(0)
  fibre_per_100g            Float?       @default(0)
  starch_per_100g           Float?       @default(0)
  salt_per_100g             Float?       @default(0)
  sodium_per_100g           Float?       @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model supplier {
  id                 Int      @id @default(autoincrement())
  customer           customer @relation(fields: [customer_id], references: [id])
  customer_id        Int
  name               String
  vat                String?
  corporation_number String?
  logo               String?
  email              String?
  tel                String?
  cell               String?
  whatsapp           String?
  account_email      String?
  account_name       String?
  account_tel        String?
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model allergy {
  id                Int                 @id @default(autoincrement())
  customer          customer?           @relation(fields: [customer_id], references: [id])
  customer_id       Int?
  name              String
  desc              String
  translation       Json?
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  ingredients       ingredients[]
  allergyIngredient allergyIngredient[]
}

model allergyIngredient {
  id            Int         @id @default(autoincrement())
  allergy       allergy     @relation(fields: [allergy_id], references: [id])
  allergy_id    Int
  ingredient    ingredients @relation(fields: [ingredient_id], references: [id])
  ingredient_id Int
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt
}

model stock {
  id                Int             @id @default(autoincrement())
  stock_location    stock_location  @relation(fields: [stock_location_id], references: [id])
  stock_location_id Int
  customer          customer        @relation(fields: [customer_id], references: [id])
  customer_id       Int
  qty               Float
  is_active         Boolean         @default(true)
  minimums          stock_minimum[]
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
}

model stock_minimum {
  id                Int            @id @default(autoincrement())
  stock             stock          @relation(fields: [stock_id], references: [id])
  stock_id          Int
  stock_location    stock_location @relation(fields: [stock_location_id], references: [id])
  stock_location_id Int
  customer          customer       @relation(fields: [customer_id], references: [id])
  customer_id       Int
  qty               Float
  created_at        DateTime       @default(now())
  updated_at        DateTime       @updatedAt
}

model stock_location {
  id            Int             @id @default(autoincrement())
  customer      customer        @relation(fields: [customer_id], references: [id])
  customer_id   Int
  name          String
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  stock         stock[]
  stock_minimum stock_minimum[]
}

model recipe_backup {
  id          Int      @id @default(autoincrement())
  recipe_id   Int
  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  profiles_id Int
  name        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model recipe_book {
  id                     Int                      @id @default(autoincrement())
  customer               customer                 @relation(fields: [customer_id], references: [id])
  customer_id            Int
  name                   String
  desc                   String?
  image                  String?
  price                  Float?
  url                    String?
  indexes                recipe_book_index[]
  access                 recipe_book_access[]
  created_at             DateTime                 @default(now())
  updated_at             DateTime                 @updatedAt
  recipe_book_collection recipe_book_collection[]
}

model recipe_book_index {
  id             Int         @id @default(autoincrement())
  recipe_book    recipe_book @relation(fields: [recipe_book_id], references: [id])
  recipe_book_id Int
  customer       customer    @relation(fields: [customer_id], references: [id])
  customer_id    Int
  order          Int
  name           String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model recipe_book_collection {
  id             Int         @id @default(autoincrement())
  recipe_id      Int
  recipe_book    recipe_book @relation(fields: [recipe_book_id], references: [id])
  recipe_book_id Int
  customer       customer    @relation(fields: [customer_id], references: [id])
  customer_id    Int
  name           String
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model recipe_book_access {
  id             Int         @id @default(autoincrement())
  recipe_book    recipe_book @relation(fields: [recipe_book_id], references: [id])
  recipe_book_id Int
  customer       customer    @relation(fields: [customer_id], references: [id])
  customer_id    Int
  created_at     DateTime    @default(now())
  updated_at     DateTime    @updatedAt
}

model todo {
  id          Int             @id @default(autoincrement())
  profiles    profiles        @relation(fields: [profiles_id], references: [id])
  profiles_id Int
  customer    customer        @relation(fields: [customer_id], references: [id])
  customer_id Int
  status      todo_status     @relation(fields: [status_id], references: [id])
  status_id   Int
  documents   todo_document[]
  created_at  DateTime        @default(now())
  updated_at  DateTime        @updatedAt
}

model todo_status {
  id          Int      @id @default(autoincrement())
  profiles    profiles @relation(fields: [profiles_id], references: [id])
  profiles_id Int
  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  name        String
  todos       todo[]
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model todo_document {
  id          Int      @id @default(autoincrement())
  todo        todo     @relation(fields: [todo_id], references: [id])
  todo_id     Int
  profiles    profiles @relation(fields: [profiles_id], references: [id])
  profiles_id Int
  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  file        String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model conversation_thread {
  id          Int      @id @default(autoincrement())
  profiles    profiles @relation(fields: [profiles_id], references: [id])
  profiles_id Int
  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  recipe      recipe   @relation(fields: [recipe_id], references: [id])
  recipe_id   Int
  message     String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model production_event {
  id          Int                     @id @default(autoincrement())
  profiles    profiles                @relation(fields: [profiles_id], references: [id])
  profiles_id Int
  customer    customer                @relation(fields: [customer_id], references: [id])
  customer_id Int
  recipe      recipe                  @relation(fields: [recipe_id], references: [id])
  recipe_id   Int
  pdf         String
  tasks       production_event_task[]
  created_at  DateTime                @default(now())
  updated_at  DateTime                @updatedAt
}

model production_event_task {
  id                  Int              @id @default(autoincrement())
  production_event    production_event @relation(fields: [production_event_id], references: [id])
  production_event_id Int
  profiles            profiles         @relation(fields: [profiles_id], references: [id])
  profiles_id         Int
  customer            customer         @relation(fields: [customer_id], references: [id])
  customer_id         Int
  recipe              recipe           @relation(fields: [recipe_id], references: [id])
  recipe_id           Int
  pdf                 String
  created_at          DateTime         @default(now())
  updated_at          DateTime         @updatedAt
}

model cost_rules {
  id          Int      @id @default(autoincrement())
  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  name        String
  cost        String
  description String
}

model packaging_costs {
  id          Int      @id @default(autoincrement())
  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  name        String
  cost        String
  description String
}

model other_costs {
  id          Int      @id @default(autoincrement())
  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int
  name        String
  cost        String
  description String
}

model markup {
  id          Int            @id @default(autoincrement())
  customer    customer       @relation(fields: [customer_id], references: [id])
  customer_id Int
  name        String
  factor      String
  type        EnumMarkUpType
  description String
}

model recipe {
  id                 Int         @id @default(autoincrement())
  name               String
  description        String
  portions           Int[]
  cost_rules         Json
  packaging_costs_id Json
  other_costs_id     Json
  markup_id          Json
  components         component[]
  setting            Json

  customer    customer @relation(fields: [customer_id], references: [id])
  customer_id Int

  brand                 brand                   @relation(fields: [brand_id], references: [id])
  brand_id              Int
  type                  EnumRecipeType
  version               String
  versions              Json
  created_at            DateTime                @default(now())
  updated_at            DateTime                @updatedAt
  conversation_thread   conversation_thread[]
  production_event      production_event[]
  production_event_task production_event_task[]
  recipe_portions       recipe_portions[]
}

model recipe_portions {
  id                 Int    @id @default(autoincrement())
  name               String
  recipe             recipe @relation(fields: [recipe_id], references: [id])
  recipe_id          Int
  size               Int
  cost_rules         Int
  packaging_costs_id Int
  other_costs_id     Int
  markup_id          Int
}

model component {
  id             Int                         @id @default(autoincrement())
  name           String
  type           EnumcomponentIngredientType
  parent         component?                  @relation("componentHierarchy", fields: [parent_id], references: [id])
  parent_id      Int?
  // ingredient    ingredients?       @relation(fields: [ingredient_id], references: [id])
  // DO I NEED THIS ingredientID - should be optional?
  ingredient_id  ingredients[]
  portions       Json
  yield          Float
  nutri_per_100  Json
  version        String
  versions       Json
  recipe         recipe                      @relation(fields: [recipe_id], references: [id])
  recipe_id      Int
  sub_components component[]                 @relation("componentHierarchy")
  created_at     DateTime                    @default(now())
  updated_at     DateTime                    @updatedAt
}

model brand {
  id         Int      @id @default(autoincrement())
  name       String
  logoSrc    String
  recipes    recipe[]
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model WebhookQueue {
  id            Int         @id @default(autoincrement())
  ingredient    ingredients @relation(fields: [ingredient_id], references: [id])
  ingredient_id Int         @map("ingredient_id")
  name          String
  createdAt     DateTime    @default(now()) @map("created_at")
  processed     Boolean     @default(false)

  @@map("webhook_queue")
}
